paths:
  /admin/users:
    get:
      tags:
        - Admin
      summary: Get all users
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdminUser'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/users/{id}:
    get:
      tags:
        - Admin
      summary: Get user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 25
          description: User ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUser'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

    delete:
      tags:
        - Admin
      summary: Delete user by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 25
          description: User ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/posts/{id}:
    delete:
      tags:
        - Admin
      summary: Delete post by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 25
          description: Post ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Post deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

  /admin/comments/{id}:
    delete:
      tags:
        - Admin
      summary: Delete comment by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 25
          description: Comment ID
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Comment deleted successfully
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '403':
          $ref: '#/components/responses/ForbiddenError'
        '404':
          $ref: '#/components/responses/NotFoundError'
        '500':
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    AdminUser:
      type: object
      required:
        - id
        - fullName
        - email
        - createdAt
        - updatedAt
        - role
        - isActive
      properties:
        id:
          type: integer
          example: 25
        fullName:
          type: string
          example: Admin
        email:
          type: string
          format: email
          example: admin@example.com
        avatarUrl:
          type: string
          nullable: true
          example: null
        createdAt:
          type: string
          format: date-time
          example: 2025-05-24T03:28:03.020Z
        updatedAt:
          type: string
          format: date-time
          example: 2025-05-24T03:28:03.020Z
        role:
          type: string
          enum:
            - USER
            - ADMIN
          example: ADMIN
        isActive:
          type: boolean
          example: false

    ErrorResponse:
      type: object
      required:
        - message
        - error
        - statusCode
      properties:
        message:
          type: string
        error:
          type: string
        statusCode:
          type: integer

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    UnauthorizedError:
      description: Unauthorized (token missing or invalid)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: No token provided
            error: Unauthorized
            statusCode: 401

    ForbiddenError:
      description: 'Forbidden: insufficient role'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: Forbidden resource
            error: Forbidden
            statusCode: 403

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: Resource not found
            error: Not Found
            statusCode: 404

    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            message: Internal server error
            error: Internal Server Error
            statusCode: 500
